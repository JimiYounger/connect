// src/app/dashboard/page.tsx

'use client'

import { useAuth } from "@/features/auth/context/auth-context"
import { useProfile } from "@/features/users/hooks/useProfile"
import { LoadingState } from "@/components/loading-state"
import { usePermissions } from "@/features/permissions/hooks/usePermissions"
import type { UserProfile } from "@/features/users/types"
import { 
  Target, Users, Building2, Crown, Shield, 
  Award, Activity, Zap, LogOut
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { motion } from "framer-motion"
import { redirect } from 'next/navigation'
import { useMemo } from 'react'

interface StatCardData {
  icon: React.ReactNode
  title: string
  field: keyof Pick<UserProfile, 'region' | 'team' | 'area' | 'role' | 'role_type' | 'hire_date'>
  color: string
  getValue: (profile: UserProfile) => string
}

const STAT_CARDS: StatCardData[] = [
  {
    icon: <Target className="w-5 h-5" />,
    title: "Region",
    field: "region",
    color: "from-blue-500 to-blue-600",
    getValue: (profile) => profile.region || 'N/A'
  },
  {
    icon: <Users className="w-5 h-5" />,
    title: "Team",
    field: "team",
    color: "from-purple-500 to-purple-600",
    getValue: (profile) => profile.team || 'N/A'
  },
  {
    icon: <Building2 className="w-5 h-5" />,
    title: "Area",
    field: "area",
    color: "from-green-500 to-green-600",
    getValue: (profile) => profile.area || 'N/A'
  },
  {
    icon: <Crown className="w-5 h-5" />,
    title: "Role",
    field: "role",
    color: "from-amber-500 to-amber-600",
    getValue: (profile) => profile.role || 'N/A'
  },
  {
    icon: <Shield className="w-5 h-5" />,
    title: "Role Type",
    field: "role_type",
    color: "from-red-500 to-red-600",
    getValue: (profile) => profile.role_type || 'N/A'
  },
  {
    icon: <Award className="w-5 h-5" />,
    title: "Hire Date",
    field: "hire_date",
    color: "from-teal-500 to-teal-600",
    getValue: (profile) => profile.hire_date || 'N/A'
  }
]

export default function DashboardPage() {
  const { session, signOut, loading: authLoading } = useAuth()
  const { profile, isLoading: profileLoading, isInitialized: profileInitialized } = useProfile(session)
  const { can, isLoading: permissionsLoading } = usePermissions(profile ?? null)

  const loadingState = useMemo(() => {
    // Log state transitions in development
    if (process.env.NODE_ENV === 'development') {
      console.log('[Dashboard] Loading State:', {
        auth: authLoading,
        session: !!session,
        profile: !!profile,
        profileLoading,
        profileInitialized,
        authInitializing: authLoading?.initializing
      })
    }

    // More granular loading state checks
    if (authLoading?.initializing) {
      return 'initializing'
    }
    
    if (authLoading?.session) {
      return 'loading-session'
    }

    if (!session && !authLoading?.initializing && !authLoading?.session) {
      return 'no-session'
    }
    
    if (profileLoading || !profileInitialized) {
      return 'loading-profile'
    }
    
    if (!profile) {
      return 'no-profile'
    }
    
    return 'ready'
  }, [authLoading, session, profileLoading, profile, profileInitialized])

  // Handle different loading states with consistent UI
  switch (loadingState) {
    case 'initializing':
    case 'loading-session':
      return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-50 via-white to-purple-50">
          <LoadingState message="Initializing..." />
        </div>
      )
    case 'no-session':
      redirect('/')
      return null
    case 'loading-profile':
      return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-50 via-white to-purple-50">
          <LoadingState message="Loading your profile..." />
        </div>
      )
    case 'no-profile':
      return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-50 via-white to-purple-50">
          <div className="text-center space-y-4">
            <h1 className="text-2xl font-semibold text-gray-900">Profile Not Found</h1>
            <p className="text-gray-600">We couldn't find your profile information</p>
            <Button 
              variant="ghost" 
              onClick={() => signOut()}
              className="flex items-center gap-2"
            >
              <LogOut className="w-4 h-4" />
              Sign Out
            </Button>
          </div>
        </div>
      )
    case 'ready':
      if (!profile || !can('view_dashboard')) {
        return (
          <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-50 via-white to-purple-50">
            <div className="text-center space-y-4">
              <h1 className="text-2xl font-semibold text-gray-900">Access Denied</h1>
              <p className="text-gray-600">You don't have permission to view the dashboard</p>
              <Button 
                variant="ghost" 
                onClick={() => signOut()}
                className="flex items-center gap-2"
              >
                <LogOut className="w-4 h-4" />
                Sign Out
              </Button>
            </div>
          </div>
        )
      }

      return (
        <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
          {/* Header with Logout */}
          <header className="border-b bg-white/50 backdrop-blur-sm">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 h-16 flex items-center justify-between">
              <h1 className="text-xl font-semibold text-gray-900">Dashboard</h1>
              <Button 
                variant="ghost" 
                onClick={() => signOut()}
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900"
              >
                <LogOut className="w-4 h-4" />
                Sign Out
              </Button>
            </div>
          </header>

          {/* Main Content */}
          <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {STAT_CARDS.map((card, index) => (
                <motion.div
                  key={card.title}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <StatCard
                    icon={card.icon}
                    title={card.title}
                    value={card.getValue(profile)}
                    color={card.color}
                  />
                </motion.div>
              ))}
            </div>
          </main>
        </div>
      )
  }
}

interface StatCardProps {
  icon: React.ReactNode
  title: string
  value: string
  color: string
}

const StatCard = ({ icon, title, value, color }: StatCardProps) => (
  <div className="bg-white/80 backdrop-blur-sm rounded-lg shadow-lg overflow-hidden border border-gray-100 hover:shadow-xl transition-shadow">
    <div className={`h-1 bg-gradient-to-r ${color}`} />
    <div className="p-4">
      <div className="flex items-center gap-3">
        <div className={`p-2 rounded-lg bg-gradient-to-br ${color} text-white`}>
          {icon}
        </div>
        <div>
          <p className="text-sm font-medium text-gray-500">{title}</p>
          <p className="text-lg font-semibold mt-0.5 text-gray-900">{value}</p>
        </div>
      </div>
    </div>
  </div>
)

// src/app/auth/callback/route.ts

import { createServerSupabase } from '@/features/auth/utils/supabase-server'
import { NextResponse } from 'next/server'
import { getTeamMemberByEmail } from '@/lib/airtable'

export const dynamic = 'force-dynamic'

export async function GET(request: Request) {
  try {
    const requestUrl = new URL(request.url)
    const code = requestUrl.searchParams.get('code')

    if (!code) {
      return NextResponse.redirect(new URL('/', request.url))
    }

    const supabase = await createServerSupabase()
    const { error, data } = await supabase.auth.exchangeCodeForSession(code)
    
    if (error) {
      console.error('Auth callback error:', error.message)
      return NextResponse.redirect(new URL('/auth/error', request.url))
    }

    // Domain validation
    if (!data.user?.email?.endsWith('@purelightpower.com')) {
      await supabase.auth.signOut()
      return NextResponse.redirect(
        new URL('/?error=invalid_domain', request.url)
      )
    }

    // Get team member data
    const teamMember = await getTeamMemberByEmail(data.user.email)
    if (!teamMember) {
      await supabase.auth.signOut()
      return NextResponse.redirect(
        new URL('/?error=no_team_member', request.url)
      )
    }

    return NextResponse.redirect(new URL('/dashboard', request.url))
  } catch (error) {
    console.error('Auth callback error:', error)
    return NextResponse.redirect(new URL('/auth/error', request.url))
  }
}
// src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from '@/features/auth/context/auth-context'
import { QueryProvider } from '@/providers/QueryProvider'
import { Toaster } from "@/components/ui/toaster"

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen flex flex-col`}
      >
        <AuthProvider>
          <main className="flex-1 container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            {children}
          </main>
        </AuthProvider>
        <Toaster />
      </body>
    </html>
  )
}

// src/app/dashboard/layout.tsx

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return children
} 

// src/features/auth/components/AuthGuard.tsx

import { useRouter } from 'next/navigation'
import { useEffect } from 'react'
import { useAuth } from '../context/auth-context'
import { useProfile } from '@/features/users/hooks/useProfile'

interface AuthGuardProps {
  children: React.ReactNode
  redirectTo?: string
  allowedRoles?: string[]
  loadingComponent?: React.ReactNode
}

export function AuthGuard({ 
  children, 
  redirectTo = '/login',
  allowedRoles = [],
  loadingComponent = <div>Loading...</div>
}: AuthGuardProps) {
  const { 
    session,
    loading,
    isAuthenticated
  } = useAuth()
  const { profile, isLoading: profileLoading } = useProfile(session)
  const router = useRouter()

  useEffect(() => {
    if (loading.initializing) {
      return
    }

    if (!loading.session && !session) {
      router.push(redirectTo)
      return
    }

    const hasInvalidRole = 
      !loading.session && 
      session && 
      allowedRoles.length > 0 && 
      profile?.role_type &&
      !allowedRoles.includes(profile.role_type)

    if (hasInvalidRole) {
      router.push('/unauthorized')
    }
  }, [
    session, 
    profile, 
    loading.session,
    loading.initializing,
    router, 
    redirectTo, 
    allowedRoles
  ])

  if (loading.initializing || profileLoading) {
    return <>{loadingComponent}</>
  }

  if (!isAuthenticated) {
    return null
  }

  const hasValidRole = 
    allowedRoles.length === 0 || 
    (profile?.role_type && 
     allowedRoles.includes(profile.role_type))

  if (!hasValidRole) {
    return null
  }

  return <>{children}</>
} 